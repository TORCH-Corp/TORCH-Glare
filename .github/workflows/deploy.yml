name: Deploy from Dev to Main

on:
  push:
    branches: [ dev ]
  workflow_dispatch:

jobs:
  merge_and_deploy:
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
      - name: Merge Dev to Main
        run: |
          git checkout main
          git merge origin/dev --no-edit
          git push origin main
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      
      - name: Install missing dependencies
        run: pnpm add vite
        
      - name: Install sshpass
        run: sudo apt-get install -y sshpass
        
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Configure SSH with proper options
          cat > ~/.ssh/config << EOF
          Host ${{ secrets.SERVER_HOST }}
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            IdentitiesOnly yes
          EOF
          
      - name: Deploy to server (clone or pull)
        run: |
          REPO_URL="https://github.com/your-org/TORCH-Glare.git"  # Replace with your actual repo URL
          
          # SSH to server and clone/pull repo, then build and deploy
          sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o IdentitiesOnly=yes ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "
            if [ ! -d '/home/admin/TORCH-Glare' ]; then
              # Clone repo if it doesn't exist
              git clone $REPO_URL /home/admin/TORCH-Glare
              cd /home/admin/TORCH-Glare
            else
              # Pull latest changes if repo exists
              cd /home/admin/TORCH-Glare
              git pull origin main
            fi
            
            # Install dependencies and build
            pnpm install --no-frozen-lockfile
            pnpm build
            
            # Start or restart the application
            pm2 restart torch-glare || pm2 start npm --name 'torch-glare' -- run start
          "
        
      - name: Health check
        run: |
          sleep 10
          curl -s -f http://${{ secrets.SERVER_HOST }}:3000 > /dev/null
          if [ $? -eq 0 ]; then
            echo "Deployment successful!"
          else
            echo "Health check failed! Application is not responding."
            exit 1
          fi
            
  notify:
    needs: merge_and_deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ needs.merge_and_deploy.result == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: Deployment ${{ needs.merge_and_deploy.result == 'success' && 'Successful' || 'Failed' }}
          SLACK_MESSAGE: 'TORCH-Glare dev to main deployment ${{ needs.merge_and_deploy.result }}'
          SLACK_FOOTER: 'GitHub Actions'
        if: env.SLACK_WEBHOOK != ''
