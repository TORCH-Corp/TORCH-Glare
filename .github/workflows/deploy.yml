name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      
      - name: Install missing dependencies
        run: pnpm add vite
        
      - name: Setup and test SSH connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Configure SSH to not check host keys
          cat > ~/.ssh/config << 'EOF'
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF
          
          # Debug the key format
          echo "=== Key fingerprint ==="
          ssh-keygen -l -f ~/.ssh/id_rsa || echo "Invalid key format"
          
          # Try direct connection with verbose output
          echo "=== Testing SSH connection ==="
          ssh -v ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "echo Connection test" || echo "Connection failed"
        continue-on-error: true
        
      - name: Deploy using SSH command directly
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "cd /home/admin/Torch-Glare-Website && git pull && pnpm install --no-frozen-lockfile && pnpm build && pm2 restart glare-website || pm2 start npm --name 'glare-website' -- run start"
        
      - name: Health check
        run: |
          sleep 10
          curl -s -f http://${{ secrets.SERVER_HOST }}:3000 > /dev/null
          if [ $? -eq 0 ]; then
            echo "Deployment successful!"
          else
            echo "Health check failed! Application is not responding."
            exit 1
          fi
            
  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ needs.deploy.result == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: Deployment ${{ needs.deploy.result == 'success' && 'Successful' || 'Failed' }}
          SLACK_MESSAGE: 'Torch-Glare-Website deployment to production ${{ needs.deploy.result }}'
          SLACK_FOOTER: 'GitHub Actions'
        if: env.SLACK_WEBHOOK != ''
